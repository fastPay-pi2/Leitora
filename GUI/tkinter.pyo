import tkinter as tk
import os
import signal
import time
import threading

class Application(tk.Frame):
	def __init__(self, master=None):
		super().__init__(master)
		self.master = master
		self.pack()
		self.create_widgets()

	def create_widgets(self):
		self.label = tk.Label(self, text="Esperando TAG")
		self.label.pack(side="top")
		self.oi = tk.Scrollbar(self)
		self.oi.pack(side='right')
		self.s = tk.Entry(self)
		self.s.insert('end',"Pesquisar...")
		self.s.bind('<KeyRelease>', self.refine)
		self.s.pack()
		self.listbox = tk.Listbox(self, yscrollcommand=self.oi.set)
		self.listbox.pack(side='top', fill='x')
		self.postt = tk.Button(self)
		self.postt["text"] = "Associar à TAG"
		self.postt["command"] = self.post
		self.postt.pack(side="top")
		self.oi.config(command=self.listbox.yview)
		self.quit = tk.Button(self, text="SAIR", fg="red",command=self.master.destroy)
		self.quit.pack(side="bottom")
		self.refine()
		self.label2 = tk.Label(self, text="Não associado")
		self.label2.pack(side="bottom")
		self.label2["fg"] = "red"
	
	def refine(self, *args):
		str="";
		if(self.s.get()!="Pesquisar..."):
			str = self.s.get()
		self.listbox.delete(0, "end")
		f = open("produtos.txt", "rt")
		for s in f.readlines():
			if(str.lower() in s.lower()):
				self.listbox.insert("end",s[0:len(s)-1]);
		f.close()

	def post(self):
		try:
			print("Tentando associar '"+self.listbox.get(self.listbox.curselection()[0]) + "'com '" + self.label["text"] + "'")
			self.label2["text"] = "Associado"
			self.label2["fg"] = "green"
		except:
			print("nada selecionado")
		



cmd = ["../start",str(os.getpid())]
childpid = os.fork();
if(childpid==0):
	os.execvp(cmd[0],cmd)
	exit(1);
root = tk.Tk()
root.geometry("400x350")
app = Application(master=root)
def signal_handler(sig, frame):
	temp = "TAG: "
	f = open("Tag.txt", "rt")
	for s in f.readlines():
		temp = temp + " " + s[0:len(s)-1]
	app.label["text"]= temp
	app.label2["text"] = "Não associado"
	app.label2["fg"] = "red"
def signal_handler2(sig, frame):
	print("oi bb\n")
	signal.alarm(1);
	t = threading.Timer(2, signal_handler2)
	
signal.signal(signal.SIGINT, signal_handler)
t = threading.Timer(2, signal_handler2)
app.mainloop()
os.kill(childpid, signal.SIGQUIT)
