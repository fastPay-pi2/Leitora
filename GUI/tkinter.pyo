import tkinter as tk
import os
import signal
import time
import threading
import requests
import json
import sys

end_point_prod = "http://fastpaypi2.ml:3000/product"
entry_point_item = "http://fastpaypi2.ml:3000/item"
entry_point_cart = "http://fastpaypi2.ml:5000/api/cart/"
tag = ""
dict_pur = {}

class Application(tk.Frame):
	def __init__(self, master=None):
		super().__init__(master)
		self.master = master
		self.pack()
		self.create_widgets()

	def create_widgets(self):
		self.label = tk.Label(self, text="Esperando TAG")
		self.label.pack(side="top")
		self.oi = tk.Scrollbar(self)
		self.oi.pack(side='right')
		self.s = tk.Entry(self, width = 45)
		self.s.insert('end',"Pesquisar...")
		self.s.bind('<KeyRelease>', self.refine)
		self.s.pack()
		self.s.bind("<1>", self.handle_click)
		self.listbox = tk.Listbox(self, yscrollcommand=self.oi.set, width = 45)
		self.listbox.pack(side='top', fill='x')
		self.postt = tk.Button(self)
		self.postt["text"] = "Associar à TAG"
		self.postt["command"] = self.post
		self.postt.pack(side="top")
		self.oi.config(command=self.listbox.yview)
		self.quit = tk.Button(self, text="SAIR", fg="red",command=self.master.destroy)
		self.quit.pack(side="bottom")
		self.cart = tk.Button(self)
		self.cart["text"] = "Associar a um carrinho"
		self.cart["command"] = self.cartt
		self.cart.pack(side="bottom")
		self.start()
		self.label2 = tk.Label(self, text="Não associado")
		self.label2.pack(side="bottom")
		self.label2["fg"] = "red"
	
	def refine(self, *args):
		strr = self.s.get()
		self.listbox.delete(0, "end")
		f = open("produtos.json", "r", encoding='utf8')
		data = json.load(f)
		f.close()
		for s in data:
			if(strr.lower() in s['name'].lower()):
				self.listbox.insert("end",s['name']);
		
	def cartt(self):
		data = {
			"rfid": tag
		}
		try:
			r = requests.post(entry_point_cart, json = data)
		except:
			self.label2["text"] = "Não foi possível fazer a associação"
			self.label2["fg"] = "orange"
			
		if 'error' in r.json().keys():
			self.label2['text'] = "Carrinho já cadastrado"
		else:
			self.label2['text'] = "Carrinho cadastrado com sucesso"
			self.label2["fg"] = "green"
		
	def start(self):
		f = open("produtos.json", "r", encoding='utf8')
		data = json.load(f)
		f.close()
		for s in data:
			self.listbox.insert("end",s['name']);
		
	def post(self):
		global dict_pur
		print('------------------------------------------------\n\n\n\n')
		print(self.listbox.get(self.listbox.curselection()[0]))
		f = open("produtos.json", "r", encoding='utf8')
		data = json.load(f)
		f.close()
		try:
			idprod = 0
			if self.listbox.get(self.listbox.curselection()[0]) in dict_pur.keys():
				idprod = int(dict_pur[self.listbox.get(self.listbox.curselection()[0])])
			data = {
				"rfid": tag,
				"expirationDate": "2020-12-12",
				"idProduct": idprod
			}
			r = requests.post(entry_point_item, json = data)
			print(r.raise_for_status())
			self.label2["text"] = "Associado"
			self.label2["fg"] = "green"
		except KeyError:
			self.label2["text"] = "Produto não cadastrado"
			self.label2["fg"] = "orange"
		except Exception as ex:
			self.label2["text"] = "Não foi possível conectar a rede"
			self.label2["fg"] = "orange"
			print(ex)
		
	def handle_click(self, event):
		self.s.delete(0,'end')
		

def getProducts():
	global dict_pur
	print("Conectando...")
	try:
		r = requests.get(end_point_prod)
		f = open("produtos.json", "w+", encoding='utf8')
		j =r.json()
		for s in j:
			s['name'] =s['name'].strip()
			dict_pur[s['name']]=s['id']
		json.dump(sorted(j, key=lambda k: k['name']), f, sort_keys=True)
		f.close();
		return False;
	except:
		return True;

while(getProducts()):
	print("Rede não encontrada!")
	time.sleep(5)
print("Conectado!\n\n")

cmd = ["../start",str(os.getpid())]
childpid = os.fork();
if(childpid==0):
	os.execvp(cmd[0],cmd)
	exit(1);
root = tk.Tk()
root.geometry("400x400")
app = Application(master=root)
def signal_handler(sig, frame):
	global tag
	tag = ""
	temp = "TAG: "
	f = open("Tag.txt", "rt")
	for s in f.readlines():
		tag = tag + "-" + s[:(len(s)-1)]
	tag = tag[1:]
	temp = temp + tag
	app.label["text"]= temp
	app.label2["text"] = "Não associado"
	app.label2["fg"] = "red"
	f.close()
def signal_handler2(sig, frame):
	signal.alarm(1);
	t = threading.Timer(2, signal_handler2)
	
signal.signal(signal.SIGINT, signal_handler)
t = threading.Timer(2, signal_handler2)
app.mainloop()
os.kill(childpid, signal.SIGQUIT)
